name: Nuttx Targets with UAVLAS support

on:
  push:
    branches:
    - 'uls-alpha'

jobs:
  build:
    runs-on: ubuntu-latest
    container: px4io/px4-dev-nuttx-focal:2021-09-08
    strategy:
      fail-fast: false
      matrix:
        config: [
          # airmind_mindpx-v2,
          # ark_can-flow,
          # ark_can-gps,
          # ark_can-rtk-gps,
          # ark_cannode,
          # atl_mantis-edu,
          # av_x-v1,
          # bitcraze_crazyflie,
          # bitcraze_crazyflie21,
          # cuav_can-gps-v1,
          # cuav_nora,
          # cuav_x7pro,
          # cubepilot_cubeorange,
          # cubepilot_cubeyellow,
          # diatone_mamba-f405-mk2,
          # freefly_can-rtk-gps,
          # holybro_can-gps-v1,
          # holybro_durandal-v1,
          # holybro_kakutef7,
          # holybro_kakuteh7,
          # holybro_pix32v5,
          # matek_h743-slim,
          # matek_gnss-m9n-f4,
          # modalai_fc-v1,
          # modalai_fc-v2,
          # mro_ctrl-zero-f7,
          # mro_ctrl-zero-f7-oem,
          # mro_ctrl-zero-h7,
          # mro_ctrl-zero-h7-oem,
          # mro_pixracerpro,
          # mro_x21,
          # mro_x21-777,
          # nxp_fmuk66-e,
          # nxp_fmuk66-v3,
          # nxp_fmurt1062-v1,
          # nxp_ucans32k146,
          # omnibus_f4sd,
          # raspberrypi_pico,
           px4_fmu-v2,
          # px4_fmu-v3,
          # px4_fmu-v4,
          # px4_fmu-v4pro,
          #px4_fmu-v5,
          # px4_fmu-v5x,
          # px4_fmu-v6c,
          # px4_fmu-v6u,
          # px4_fmu-v6x,
          # sky-drones_smartap-airlink,
          # spracing_h7extreme,
          # uvify_core
          ]
    steps:
    - uses: actions/checkout@v1
      with:
        token: ${{secrets.YK_PAT}}

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{matrix.config}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: ${{matrix.config}}-ccache-
    - name: setup ccache
      run: |
          mkdir -p ~/.ccache
          echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          echo "max_size = 120M" >> ~/.ccache/ccache.conf
          echo "hash_dir = false" >> ~/.ccache/ccache.conf
          ccache -s
          ccache -z

    - name: make all_variants_${{matrix.config}}
      run: make all_variants_${{matrix.config}}
      timeout-minutes: 45
    - name: make ${{matrix.config}} bloaty_compileunits
      run: make ${{matrix.config}} bloaty_compileunits || true
    - name: make ${{matrix.config}} bloaty_inlines
      run: make ${{matrix.config}} bloaty_inlines || true
    - name: make ${{matrix.config}} bloaty_segments
      run: make ${{matrix.config}} bloaty_segments || true
    - name: make ${{matrix.config}} bloaty_symbols
      run: make ${{matrix.config}} bloaty_symbols || true
    - name: make ${{matrix.config}} bloaty_templates
      run: make ${{matrix.config}} bloaty_templates || true
    - name: make ${{matrix.config}} bloaty_ram
      run: make ${{matrix.config}} bloaty_ram || true
    - name: make ${{matrix.config}} bloaty_compare_master
      run: make ${{matrix.config}} bloaty_compare_master || true
    - name: ccache post-run
      run: ccache -s

    - name: Get current version
      run: echo "::set-output name=TAG_VERSION::$(git describe --tags --dirty --match "v*")"
      id: version

    - name: Generate version file
      run: echo ${{steps.version.outputs.TAG_VERSION}} > version.txt

    - name: Upload px4 package
      uses: actions/upload-artifact@v2
      with:
        name: px4_package_${{matrix.config}}
        path: |
          build/**/*.px4
          build/**/*.bin


    - name: Upload Info
      uses: actions/upload-artifact@v2
      with:
        name: info
        path: ${{github.workspace}}/info.md

    - name: Upload Version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  release_all:
    needs: [build]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout ULSQX-Releases
      uses: actions/checkout@v2
      with:
        repository: UAVLAS/ULSPX4-Releases
        token: ${{ secrets.YK_PAT}}
        ref: main

    - name: Create Assets Folder
      run: |
        mkdir -p assets

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./assets

    - name: Set version
      shell: bash
      run: |
            cd ./assets
            ls -all
            ls ./version -all
            ls ./info -all
            echo "::set-output name=TAG_VERSION::$(cat ./version/version.txt)"
      id: version


    - name: Update release repository
      run: |
           git config user.name "Yury Kapacheuski"
           git config user.email "yk@uavlas.com"
           git tag -f release-uls-${{steps.version.outputs.TAG_VERSION}}
           git push --tags
           git push

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #       GITHUB_TOKEN: ${{ secrets.YK_PAT }}
    #   with:
    #      tag_name: release-uls-${{steps.version.outputs.TAG_VERSION}}
    #      release_name: Px4 firmware with UAVLAS devices Support - ${{steps.version.outputs.TAG_VERSION}}
    #      body_path: ./assets/info/info.md
    #      draft: true
    #      prerelease: true
    #      owner: uavlas
    #      repo: ULSPX4-Releases
    #      commitish: main

# Create a filtered zip of the repository.
    - name: Zip Repository (excludes .git*)
      run: |
        echo "Compressing assets..."
        zip -r PX4-AllDevices-UAVLAS-${{steps.version.outputs.TAG_VERSION}}.zip assets

    - name: Create Release
      run: |
        echo "Uploading artifacts"
        gh release create release-uls-${{steps.version.outputs.TAG_VERSION}} -t "Px4 firmware with UAVLAS devices Support - ${{steps.version.outputs.TAG_VERSION}}" -F ./info/info.md  PX4-AllDevices-UAVLAS-${{steps.version.outputs.TAG_VERSION}}.zip
       # hub release edit $(find . -type f -name "*.*" -printf "-a %p ") -m "" "release-uls-${{steps.version.outputs.TAG_VERSION}}"
      env:
        GITHUB_TOKEN: ${{ secrets.YK_PAT }}

    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: uls-package
    #     if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
    #     path: |
    #       assets/**/*.px4
    #       assets/**/*.bin

    # - name: Publish release
    #   uses: actions/github-script@v3
    #   with:
    #      github-token: ${{secrets.YK_PAT}}
    #      script: |
    #         github.repos.updateRelease({
    #           owner: "uavlas",
    #           repo: "ULSPX4-Releases",
    #           release_id: "${{ steps.create_release.outputs.id }}",
    #           draft: false
    #         });
