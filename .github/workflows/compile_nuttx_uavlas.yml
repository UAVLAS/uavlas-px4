name: Nuttx Targets with UAVLAS support

on:
  push:
    branches:
    - 'uls-alpha'

jobs:
  build:
    runs-on: ubuntu-latest
    container: px4io/px4-dev-nuttx-bionic:2020-04-01
    strategy:
      matrix:
        config: [
          # airmind_mindpx-v2_default,
          # av_x-v1_default,
          # bitcraze_crazyflie_default,
          # cuav_nora_default,
          # cuav_x7pro_default,
          # cubepilot_cubeorange_console,
          # cubepilot_cubeorange_default,
          # cubepilot_cubeyellow_console,
          # cubepilot_cubeyellow_default,
          # holybro_durandal-v1_default,
          # holybro_durandal-v1_stackcheck,
          # holybro_kakutef7_default,
          # holybro_pix32v5_default,
          # intel_aerofc-v1_default,
          # modalai_fc-v1_default,
          # mro_ctrl-zero-f7_default,
          # mro_x21-777_default,
          # mro_x21_default,
          # nxp_fmuk66-v3_default,
          # nxp_fmuk66-e_default,
          # nxp_fmuk66-v3_socketcan,
          # nxp_fmurt1062-v1_default,
          # nxp_rddrone-uavcan146_default,
          # omnibus_f4sd_default,
          px4_fmu-v2_multicopter,
          px4_fmu-v3_default,
          px4_fmu-v4_default,
          px4_fmu-v4pro_default,
          px4_fmu-v5_multicopter,
          px4_fmu-v5x_default,
          #px4_fmu-v6x_default,
          px4_io-v2_default,
          # spracing_h7extreme_default,
          # uvify_core_default
          ]
    steps:
    - uses: actions/checkout@v1
      with:
        token: ${{secrets.YK_PAT}}

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{matrix.config}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: ${{matrix.config}}-ccache-
    - name: setup ccache
      run: |
          mkdir -p ~/.ccache
          echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 6" >> ~/.ccache/ccache.conf
          echo "max_size = 400M" >> ~/.ccache/ccache.conf
          ccache -s
          ccache -z

    - name: make ${{matrix.config}}
      run: make ${{matrix.config}}
    - name: make ${{matrix.config}} bloaty_compileunits
      run: make ${{matrix.config}} bloaty_compileunits || true
    - name: make ${{matrix.config}} bloaty_inlines
      run: make ${{matrix.config}} bloaty_inlines || true
    - name: make ${{matrix.config}} bloaty_segments
      run: make ${{matrix.config}} bloaty_segments || true
    - name: make ${{matrix.config}} bloaty_symbols
      run: make ${{matrix.config}} bloaty_symbols || true
    - name: make ${{matrix.config}} bloaty_templates
      run: make ${{matrix.config}} bloaty_templates || true
    - name: make ${{matrix.config}} bloaty_compare_master
      run: make ${{matrix.config}} bloaty_compare_master || true
    - name: ccache post-run
      run: ccache -s

    - name: Get current version
      run: echo "::set-output name=TAG_VERSION::$(git describe --tags --dirty --match "v*")"
      id: version

    - name: Generate version file
      run: echo ${{steps.version.outputs.TAG_VERSION}} > version.txt

    - name: Upload px4 package
      uses: actions/upload-artifact@v1
      with:
        name: px4_package_${{matrix.config}}
        path: build/${{matrix.config}}/${{matrix.config}}.px4

    - name: Upload Info
      uses: actions/upload-artifact@v2
      with:
        name: info
        path: ${{github.workspace}}/info.md

    - name: Upload Version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  release_all:
    needs: [build]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout ULSQX-Releases
      uses: actions/checkout@v2
      with:
        repository: UAVLAS/ULSPX4-Releases
        token: ${{ secrets.YK_PAT}}
        ref: main

    - name: Create Assets Folder
      run: |
        mkdir -p assets

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./assets

    - name: Set version
      shell: bash
      run: |
            cd ./assets
            ls -all
            ls ./version -all
            ls ./info -all
            echo "::set-output name=TAG_VERSION::$(cat ./version/version.txt)"
      id: version


    - name: Update release repository
      run: |
           git config user.name "Yury Kapacheuski"
           git config user.email "yk@uavlas.com"
           git tag -f release-uls-${{steps.version.outputs.TAG_VERSION}}
           git push --tags
           git push

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.YK_PAT }}
      with:
         tag_name: release-uls-${{steps.version.outputs.TAG_VERSION}}
         release_name: Px4 firmware with UAVLAS devices Support - ${{steps.version.outputs.TAG_VERSION}}
         body_path: ./assets/info/info.md
         draft: true
         prerelease: true
         owner: uavlas
         repo: ULSPX4-Releases
         commitish: main

    - name: Upload Artifacts
      run: |
        cd ./assets
        ls -a
        hub release edit $(find . -type f -name "*.*" -printf "-a %p ") -m "" "release-uls-${{steps.version.outputs.TAG_VERSION}}"
      env:
        GITHUB_TOKEN: ${{ secrets.YK_PAT }}

    - name: Publish release
      uses: actions/github-script@v3
      with:
         github-token: ${{secrets.YK_PAT}}
         script: |
            github.repos.updateRelease({
              owner: "uavlas",
              repo: "ULSPX4-Releases",
              release_id: "${{ steps.create_release.outputs.id }}",
              draft: false
            });
